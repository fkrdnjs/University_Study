//1번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int n, i;
    int* x = NULL;
    int sum = 0;

    scanf("%d", &n);

    x = (int*)malloc(n * sizeof(int));

    if (x == NULL)
        return -1;

    for (i = 0; i < n; i++) {
        scanf("%d", &x[i]);
        sum += x[i];
    }

    printf("%d", sum);


    return 0;
}

//2번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int n, i, j;
    double* x = NULL;
    double max;

    scanf("%d", &n);

    x = (double*)malloc(n * sizeof(double));

    if (x == NULL)
        return -1;

    for (i = 0; i < n; i++)
        scanf("%lf", &x[i]);
    
    max = x[0];

    for (i = 0; i < n; i++) {
        if (x[i] > max)
            max = x[i];
    }

    printf("%.2lf", max);

    return 0;
}

//3번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int n, d;
    int* id = NULL;
    int i;

    scanf("%d", &n);

    id = (int*)malloc(n * sizeof(int));

    if (id == NULL)
        return -1;

    for (i = 0; i < n; i++)
        scanf("%d", &id[i]);

    scanf("%d", &d);

    id = (int*)realloc(id, sizeof(int)*(n-d));

    for (i = 0; i < n - d; i++)
        printf("%d\n", id[i]);

    free(id);

    return 0;
}

//4번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int x, y;
    char** p = NULL;
    int i, j;
    char k = 'a';

    scanf("%d %d", &x, &y);

    p = (char **)malloc(y * sizeof(char *));

    for (i = 0; i < ; i++)
        p[i] = (char *)malloc(x * sizeof(char));

    for (i = 0; i < y; i++) {
        for (j = 0; j < x; j++) {
            printf("%c ", k);
            if (k == 'z') {
                k = 'A';
                k -= 1;
            }
            if (k == 'Z') {
                k = 'a';
                k -= 1;
            }
            k += 1;
        }
        printf("\n");
    }

    for (i = 0; i < y; i++)
        free(p[i]);

    free(p);

    return 0;
}

//5번 -> 널문자까지 고려해서 한칸 더 동적할당 필요
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int n, i;
    char* p = NULL;
    char x, y;
    int cnt1 = 0, cnt2 = 0;

    scanf("%d", &n);

    p = (char*)malloc((n+1) * sizeof(char));

    if (p == NULL)
        return -1;

    scanf("%s", p);
    getchar();

    scanf("%c %c", &x, &y);

    for (i = 0; i < n; i++) {
        if (p[i] == x)
            cnt1 += 1;
        if (p[i] == y)
            cnt2 += 1;
    }

    printf("%d %d", cnt1, cnt2);

    free(p);

    return 0;
}


//6번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct student {
    char name[8];
    int ko;
    int en;
    int ma;
    double avg;
};

typedef struct student st;

int main()
{
    int n, i;
    st* p;
    int total = 0;

    scanf("%d", &n);

    p = (st*)malloc(n * sizeof(st));

    if (p == NULL)
        return -1;

    for (i = 0; i < n; i++) {
        scanf("%s %d %d %d", p[i].name, &p[i].ko, &p[i].en, &p[i].ma);
        total = p[i].ko + p[i].en + p[i].ma;

        p[i].avg = (double)total / 3.0;
    }

    for (i = 0; i < n; i++) {
        printf("%s %.1lf", p[i].name, p[i].avg);

        if (p[i].ko >= 90 || p[i].en >= 90 || p[i].ma >= 90)
            printf(" GREAT");

        if (p[i].ko < 70 || p[i].en < 70 || p[i].ma < 70)
            printf(" BAD");

        printf("\n");
    }

    free(p);

    return 0;
}


//7번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

struct student {
    char name[8];
    int ko;
    int en;
    int ma;
    double avg;
};

typedef struct student st;

int main()
{
    int n;
    int* p = NULL;
    int i, tmp;

    scanf("%d", &n);

    p = (int*)malloc(n * sizeof(int));

    if (p == NULL)
        return -1;

    for (i = 0; i < n; i++)
        scanf("%d", &p[i]);

    for (i = 0; i < n - 1; i++) {
        if (p[i] > p[i + 1]) {
            tmp = p[i];
            p[i] = p[i + 1];
            p[i + 1] = tmp;
        }
    }

    for (i = 0; i < n; i++)
        printf("%d\n", p[i]);

    free(p);

    return 0;
}

//8
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int n;
    char* p = NULL;
    int i, cnt = 0;;

    scanf("%d", &n);
    getchar();

    p = (char*)malloc(n * sizeof(char));

    if (p == NULL)
        return -1;

    for (i = 0; i < n; i++)
        scanf("%c", &p[i]);

    for (i = 0; i < n - 2; i++) {
        if (p[i] == 'c' && p[i + 1] == 'a' && p[i + 2] == 't') {
            cnt += 1;
        }
    }

    printf("%d", cnt);

    free(p);

    return 0;
}


//9번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int n;
    char** p;
    char x[101];
    int len;
    int i, min = 102;

    scanf("%d", &n);
    getchar();

    p = (char**)malloc(n * sizeof(char*));

    for (i = 0; i < n; i++) {
        gets(x);
        len = strlen(x);

        p[i] = (char*)malloc((len + 1) * sizeof(char));

        strcpy(p[i], x);
    }

    for (i = 0; i < n; i++) {
        if (min > strlen(p[i])) {
            min = strlen(p[i]);
            strcpy(x, p[i]);
        }
    }

    printf("%s", x);

    return 0;
}


//10번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int n;
    char** p;
    char* tmp;
    char x[101];
    int len;
    int i, j;

    scanf("%d", &n);
    getchar();

    p = (char**)malloc(n * sizeof(char*));

    for (i = 0; i < n; i++) {
        gets(x);
        len = strlen(x);

        p[i] = (char*)malloc((len + 1) * sizeof(char));

        strcpy(p[i], x);
    }

    printf("\n");

    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (strlen(p[i]) > strlen(p[j])) {
                tmp = p[i];
                p[i] = p[j];
                p[j] = tmp;
            }
        }
    }

    for (i = 0; i < n; i++)
        printf("%s\n", p[i]);

    for (i = 0; i < n; i++)
        free(p[i]);

    free(p);

    return 0;
}

//11번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void add(int*, int**);

int main(void) {
    int size = 5;
    int* arr = (int*)malloc(sizeof(int) * size); //길이가 5인 배열 생성
    int i = 0;

    while (1) {
        scanf("%d", &arr[i]);

        //사용자 입력값이 -1이면 반복문 탈출
        if (arr[i] == -1)
            break;

        //i+1번째가 size와 같으면 add함수를 호출
        if (i + 1 == size)
            add(&size, &arr);

        i++;
    }

    for (int j = 0; j <= i; j++)
        printf("%d\n", arr[j]);

    free(arr);

    return 0;
}

void add(int* s, int** ar) {
    int newsize = *s + 3; //size의 크기를 3 증가시킴

    //main의 arr보다 길이가 3긴 배열 생성
    int* temp = (int*)malloc(sizeof(int) * newsize);

    //ar의 값을 temp에 복사
    for (int i = 0; i < *s; i++)
        temp[i] = (*ar)[i];

    free(*ar); //이전 배열 삭제

    *ar = temp;
    *s += 3; //main의 size를 3증가시킴
}

//12
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(void) {
    
    int n;
    int* p = NULL;
    int k = -1;
    int i;

    scanf("%d", &n);

    p = (int*)malloc((n-1) * sizeof(int));
    if (p == NULL)
        return -1;

    for (i = 0; i < n - 1; i++) {
        k += 1;

        if (k == n / 2)
            k += 1;

        p[i] = k;
    }

    for (i = 0; i < n - 1; i++)
        printf(" %d", p[i]);

    free(p);

    return 0;
}

//13번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(void) {
    
    int n;
    char tmp[101];
    int i, j;
    char** p = NULL;
    int len;
    char* k;

    scanf("%d", &n);
    getchar();

    p = (char**)malloc(n * sizeof(char*));
    if (p == NULL)
        return -1;

    for (i = 0; i < n; i++) {
        gets(tmp);
        len = strlen(tmp);

        p[i] = (char*)malloc((len + 1) * sizeof(char));

        strcpy(p[i], tmp);
    }

    printf("\n");

    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (strcmp(p[i], p[j]) < 0) {
                k = p[i];
                p[i] = p[j];
                p[j] = k;
            }
        }
    }

    for (i = 0; i < n; i++)
        printf("%s\n", p[i]);

    for (i = 0; i < n; i++)
        free(p[i]);
    free(p);

    return 0;
}
