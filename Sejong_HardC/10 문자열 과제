//1-1번 - 어휴 몰겄따
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    char x[100];
    int n;
    int len;
    int i, j, k;
    int total = 0;

    scanf("%s", x);
    scanf("%d", &n);

    len = strlen(x);

    for (i = 0; i < len; i++) {
        total = 0;
        if (x[i] >= 'A' && x[i] <= 'Z')
            x[i] = x[i] + n;
        else if (x[i] >= 'a' && x[i] <= 'z')
            x[i] = x[i] - n;
        else if (x[i] >= '0' && x[i] <= '9') {
            if (x[i + 1] >= '0' && x[i + 1] <= '9') {//두자리수
                total = (x[i] - '0') * 10 + (x[i + 1] - '0');

                if (n == 2) {
                    x[i] = total + 'A' - 1;
                    x[i + 1] = total + 'A' - 1;
                    i += 1;
                }

                else if (n == 1) {
                    x[i] = total + 'A' - 1;
                    
                    for (j = i + 1; j < len; j++) {
                        x[j] = x[j + 1];
                    }
                    len -= 1;
                }

                else {
                    for (j = len; j >= i + 2; j--)
                        x[j + n - len + 1] = x[j];

                    for (j = i; j < i + n; j++)
                        x[j] = total + 'A' - 1;

                    i = i + n - 1;
                    len = strlen(x);
                }

            }
            
            else {//한자리수
                total = x[i] - '0';

                if (n == 1)
                    x[i] = total + 'A' - 1;

                else {
                    for (j = len; j >= i + 1; j--)
                        x[j + n - 1] = x[j];

                    for (j = i; j < i + n; j++)
                        x[j] = total + 'A' - 1;

                    i = i + n - 1;
                    len = strlen(x);
                }
            }
            
        }
        else
            x[i] = ' ';
    }

    printf("%s", x);

    return 0;
}


//1-2 while문 사용에 원래 문자열 다시 돌려놓는 과정만 추가
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    char x[100], y[100], z[100];
    int n = 0;
    int len1, len2;
    int i, j, k;
    int total = 0;
    int f1 = 0, f2 = 0;

    scanf("%s", x);
    scanf("%s", y);

    len1 = strlen(x);
    len2 = strlen(y);

    n = 1;

    for (i = 0; i < len1; i++)
        z[i] = x[i];
    k = len1;

    while (1) {

        for (i = 0; i < len1; i++) {
            total = 0;
            if (x[i] >= 'A' && x[i] <= 'Z')
                x[i] = x[i] + n;
            else if (x[i] >= 'a' && x[i] <= 'z')
                x[i] = x[i] - n;
            else if (x[i] >= '0' && x[i] <= '9') {
                if (x[i + 1] >= '0' && x[i + 1] <= '9') {//두자리수
                    total = (x[i] - '0') * 10 + (x[i + 1] - '0');

                    if (n == 2) {
                        x[i] = total + 'A' - 1;
                        x[i + 1] = total + 'A' - 1;
                        i += 1;
                    }

                    else if (n == 1) {
                        x[i] = total + 'A' - 1;

                        for (j = i + 1; j < len1; j++) {
                            x[j] = x[j + 1];
                        }
                        len1 -= 1;
                    }

                    else {
                        for (j = len1; j >= i + 2; j--)
                            x[j + n - len1 + 1] = x[j];

                        for (j = i; j < i + n; j++)
                            x[j] = total + 'A' - 1;

                        i = i + n - 1;
                        len1 = strlen(x);
                    }

                }

                else {//한자리수
                    total = x[i] - '0';

                    if (n == 1)
                        x[i] = total + 'A' - 1;

                    else {
                        for (j = len1; j >= i + 1; j--)
                            x[j + n - 1] = x[j];

                        for (j = i; j < i + n; j++)
                            x[j] = total + 'A' - 1;

                        i = i + n - 1;
                        len1 = strlen(x);
                    }
                }

            }
            else
                x[i] = ' ';
        }

        n += 1;

        if (strcmp(x, y) == 0) {
            f1 = 1;
            break;
        }

        for (i = 0; i < k; i++)
            x[i] = z[i];

        len1 = k;

        if (n == 27)
            break;
    }
    
    n = 1;
    k = len2;

    for (i = 0; i < len2; i++)
        z[i] = y[i];

    while (1) {

        for (i = 0; i < len2; i++) {
            total = 0;
            if (y[i] >= 'A' && y[i] <= 'Z')
                y[i] = y[i] + n;
            else if (y[i] >= 'a' && y[i] <= 'z')
                y[i] = y[i] - n;
            else if (y[i] >= '0' && y[i] <= '9') {
                if (y[i + 1] >= '0' && y[i + 1] <= '9') {//두자리수
                    total = (y[i] - '0') * 10 + (y[i + 1] - '0');

                    if (n == 2) {
                        y[i] = total + 'A' - 1;
                        y[i + 1] = total + 'A' - 1;
                        i += 1;
                    }

                    else if (n == 1) {
                        y[i] = total + 'A' - 1;

                        for (j = i + 1; j < len2; j++) {
                            y[j] = y[j + 1];
                        }
                        len2 -= 1;
                    }

                    else {
                        for (j = len2; j >= i + 2; j--)
                            y[j + n - len2 + 1] = y[j];

                        for (j = i; j < i + n; j++)
                            y[j] = total + 'A' - 1;

                        i = i + n - 1;
                        len2 = strlen(y);
                    }

                }

                else {//한자리수
                    total = y[i] - '0';

                    if (n == 1)
                        y[i] = total + 'A' - 1;

                    else {
                        for (j = len2; j >= i + 1; j--)
                            y[j + n - 1] = y[j];

                        for (j = i; j < i + n; j++)
                            y[j] = total + 'A' - 1;

                        i = i + n - 1;
                        len2 = strlen(y);
                    }
                }

            }
            else
                y[i] = ' ';
        }

        n += 1;

        if (strcmp(x, y) == 0) {
            f2 = 2;
            break;
        }

        for (i = 0; i < k; i++)
            y[i] = z[i];

        len2 = k;

        if (n == 27)
            break;
    }

    printf("%d", f1 + f2);

    return 0;
}


//2번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    char x[20];
    int a = 0, b = 0;
    int i, j = 0;
    int len, f = 0;
    int cnt = 0;

    gets(x);

    len = strlen(x);

    for (i = 0; i < len; i++) {
        if (x[i] == ' ') {
            cnt += 1;
            while (1) {
                i += 1;
                if (x[i] == ' ' || x[i] == '\0') {
                    i -= 1;
                    break;
                }

                if (cnt == 1)
                    a = a * 10 + (x[i] - '0');

                else if (cnt == 2)
                    b = b * 10 + (x[i] - '0');
            }
        }

    }

    for (i = 0; i < len; i++) {
        if (x[i] == ' ')
            x[i] = '\0';
    }

    if (strcmp(x, "add") == 0)
        printf("%d", a + b);

    else if (strcmp(x, "sub") == 0)
        printf("%d", a - b);

    else if (strcmp(x, "mul") == 0)
        printf("%d", a * b);

    else if (strcmp(x, "div") == 0)
        printf("%d", a / b);

    return 0;
}


//3-1
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    char x[100], y[100];
    int i, j;
    int len1, len2;
    int f;
    int cnt = 0;

    gets(x);
    gets(y);

    len1 = strlen(x);
    len2 = strlen(y);

    for (i = 0; i < len1; i++) {
        f = 0;
        if (x[i] == y[0]) {
            for (j = 0; j < len2; j++) {
                if (x[i] == y[j])
                    f = 1;
                else {
                    f = 0;
                    i -= 1;
                    break;
                }
                i += 1;
            }
        }

        if (f == 1) {
            cnt += 1;
            i -= 1;
        }
    }

    printf("%d", cnt);

    return 0;
}

//3-2번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    char x[100], y[100];
    char* p;
    int i;
    int len1, len2;
    int cnt = 0;

    gets(x);
    gets(y);

    len1 = strlen(x);
    len2 = strlen(y);

    
    for (i = 0; i < len1; i++) {
        if (x[i] == ' ' || x[i] == '.')
            x[i] = '\0';
    }

    for (i = 0; i < len1; i++) {
        p = x + i;
        if (i == 0) {
            if (strcmp(p, y) == 0)
                cnt += 1;
        }

        else if (x[i] == '\0') {
            if (strcmp(p + 1, y) == 0)
                cnt += 1;
        }

    }

    printf("%d", cnt);

    return 0;
}

//4-1번
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    char x[101];
    int i = 0, j = 0;
    double total = 0;
    double y[100];
    int cnt = 0, len;

    gets(x);

    len = strlen(x);

    for (i = 0; i < len; i++) {
        total = 0;
        if (x[i] >= '0' && x[i] <= '9') {
            while (1) {
                total = total * 10 + (x[i] - '0');
                
                if (x[i + 1] >= '0' && x[i + 1] <= '9')
                    i += 1;
                else
                    break;
            }
            y[cnt] = total;
            cnt += 1;
        }
        
    }

    for (j = 0; j < cnt; j++)
        printf(" %.0lf", y[j]);

    return 0;
}

//4-2
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    char x[101];
    int i = 0, j = 0;
    double total = 0;
    double y[100];
    int cnt = 0, len;
    int f = 0;

    gets(x);

    len = strlen(x);

    for (i = 0; i < len; i++) {
        if (x[i] == '-')
            f = 1;
        total = 0;
        if (x[i] >= '0' && x[i] <= '9') {
            while (1) {
                total = total * 10 + (x[i] - '0');
                
                if (x[i + 1] >= '0' && x[i + 1] <= '9')
                    i += 1;
                else
                    break;
            }
            if(f == 0)
                y[cnt] = total;
            else {
                y[cnt] = -total;
                f = 0;
            }
            cnt += 1;
        }
        
    }

    for (j = 0; j < cnt; j++)
        printf(" %.0lf", y[j]);

    return 0;
}

//4-3
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    char x[101], z[101];
    int i = 0, j = 0;
    double total = 0;
    double y[100];
    int cnt = 0, cnt2 = 0, len;
    int f = 0;

    gets(x);

    len = strlen(x);

    for (i = 0; i < len; i++) {
        if (x[i] == '-')
            f = 1;
        total = 0;
        if (x[i] >= '0' && x[i] <= '9') {
            while (1) {
                total = total * 10 + (x[i] - '0');

                if (x[i + 1] >= '0' && x[i + 1] <= '9')
                    i += 1;
                else
                    break;
            }
            if (f == 0)
                y[cnt] = total;
            else {
                y[cnt] = -total;
                f = 0;
            }
            cnt += 1;
        }

    }

    for (i = 0; i < len; i++) { // 연산기호 저장 코드
        if (x[i] == '+' || x[i] == '-') {
            z[cnt2] = '+';
            cnt2 += 1;
        }
        else if (x[i] == '*') {
            z[cnt2] = '*';
            cnt2 += 1;
        }
        else if (x[i] == '/') {
            z[cnt2] = '/';
            cnt2 += 1;
        }
    }

    while (1) {//i가 한번 커지고 기호를 당겼을 때 당겨진 기호가 곱,나누기면 연산을 못해서 while로 처음부터 살피는 과정 반복, 없으면 탈출
        f = 0;
        for (i = 0; i < cnt2; i++) {//곱셈,나눗셈 먼저 연산
            if (z[i] == '*') {
                f = 1;
                y[i] = y[i] * y[i + 1];

                for (j = i + 1; j < cnt; j++)
                    y[j] = y[j + 1];

                for (j = i; j < cnt2; j++)
                    z[j] = z[j + 1];

                cnt -= 1;
                cnt2 -= 1;
            }

            else if (z[i] == '/') {
                f = 1;
                y[i] = y[i] / y[i + 1];

                for (j = i + 1; j < cnt; j++)
                    y[j] = y[j + 1];

                for (j = i; j < cnt2; j++)
                    z[j] = z[j + 1];

                cnt -= 1;
                cnt2 -= 1;
            }

            if (f == 1)
                break;
        }
        if (f == 0)
            break;
    }

    total = 0;

    for (i = 0; i < cnt; i++) {
        total = total + y[i];
    }

    printf("%lf", total);

    return 0;
}

//5-1
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int k, len, i, j;
    char x[1001];
    char* word[100];
    char* tmp;
    int cnt = 0;

    gets(x);
    scanf("%d", &k);

    len = strlen(x);

    for (i = 0; i < len; i++) {
        if (x[i] == ' ')
            x[i] = '\0';
    }

    word[cnt++] = x;

    for (i = 0; i < len; i++) {
        if (x[i] == '\0') {
            word[cnt++] = &x[i + 1];
        }
    }

    for (i = 0; i < cnt; i++) {
        for (j = i + 1; j < cnt; j++) {
            if (strlen(word[i]) < strlen(word[j])) {
                tmp = word[i];
                word[i] = word[j];
                word[j] = tmp;
            }
            else if (strlen(word[i]) == strlen(word[j]) && (strcmp(word[i], word[j]) > 0)) {
                tmp = word[i];
                word[i] = word[j];
                word[j] = tmp;
            }
        }
    }

    printf("%s", word[k - 1]);

    return 0;
}

//5-2
